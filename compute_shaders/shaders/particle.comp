#version 430 core

struct Particle{
    vec2 pos;
};

layout(std430, binding = 1) buffer particleBuffer
{
    Particle particles[];
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

uniform vec2[2048] initialPos;
uniform float t;

const vec4 sphere = vec4(0, 0, 0, 0.5);


vec3 mod289(vec3 x) 
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) 
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) 
{
    return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r) 
{
  return 1.79284291400159 - 0.85373472095314 * r;
}


float snoise(vec3 v) 
{
    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

    // First corner
    vec3 i  = floor(v + dot(v, C.yyy) );
    vec3 x0 =   v - i + dot(i, C.xxx) ;

    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );

    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

    // Permutations
    i = mod289(i); 
    vec4 p = permute( permute( permute( 
            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
            + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;

    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

    vec4 x = x_ *ns.x + ns.yyyy;
    vec4 y = y_ *ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );

    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);

    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}


vec3 noise3d(vec3 s) 
{
  float s0  = snoise(vec3(s));
  float s1 = snoise(vec3(s.y + 31.416, s.z - 47.853, s.x + 12.793));
  float s2 = snoise(vec3(s.z - 233.145, s.x - 113.408, s.y - 185.31));
  return vec3(s0, s1, s2);
}


float ramp(float r) 
{
    return clamp((15.0 * r - 10 * pow(r, 3.0) + 3 * pow(r, 5.0)) / 8.0, -1.0, 1.0);
}


float sphere_sdf(vec3 p) 
{
    vec3 center = sphere.xyz;
    float radius = sphere.w;
    float dist = length(p - center);
    return dist - radius;
}


vec3 gradient(vec3 p) 
{
    const float e = 0.01;
    vec3 dx = vec3(e, 0, 0);
    vec3 dy = vec3(0, e, 0);
    vec3 dz = vec3(0, 0, e);

    float d = sphere_sdf(p);
    float dfdx = sphere_sdf(p + dx) - d;
    float dfdy = sphere_sdf(p + dy) - d;
    float dfdz = sphere_sdf(p + dz) - d;

    return normalize(vec3(dfdx, dfdy, dfdz));
}


vec3 potential(vec3 p) 
{
    vec3 grad = gradient(p);
    float dist = sphere_sdf(p);
    float alpha = abs(ramp(dist / 1.0));

    vec3 rpsi = 2.0 * vec3(p.z, 0.0, -p.x);

    vec3 psi = noise3d(p) + rpsi;
    float normal = dot(psi, grad);
    vec3 psi_const = alpha * psi + (1.0 - alpha) * normal * grad; 

    return psi_const;
}


vec3 curl(vec3 p)
{
    const float e = 0.0001;
    vec3 dx = vec3(e, 0.0, 0.0);
    vec3 dy = vec3(0.0, e, 0.0);
    vec3 dz = vec3(0.0, 0.0, e);

    float x = potential(p + dy).z - potential(p - dy).z - potential(p + dz).y + potential(p - dz).y;
    float y = potential(p + dz).x - potential(p - dz).x - potential(p + dx).z + potential(p - dx).z;
    float z = potential(p + dx).y - potential(p - dx).y - potential(p + dy).x + potential(p - dy).x;

    return normalize(vec3(x, y, z) / (2.0 * e));
}


void main()
{
    uint i = gl_GlobalInvocationID.x;

    vec3 speed = curl(vec3(particles[i].pos.xy, t));

    particles[i].pos += speed.xy / 20.0;

    if (particles[i].pos.y > 1.0) 
    {
        particles[i].pos = vec2(initialPos[i].x, -1.0);
    }
}